{"ast":null,"code":"var _jsxFileName = \"/Users/Andrea/abenav/cpsc471FinalProject/cpsc471pages/src/components/stores/LoginForm.js\";\nimport React from 'react';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './UserStore'; //to find out about successful logins\n\nimport \"./LoginCSS.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttonDisabled: false //API checks if user actually exists @ login time\n\n    };\n  }\n\n  setInputValue(property, val) {\n    val = val.trim(); //trimmed string value\n\n    if (val.length > 20) {\n      //max value of input is 20 \n      return;\n    }\n\n    this.setState({\n      [property]: val\n    });\n  }\n\n  resetForm() {\n    this.setState({\n      username: '',\n      password: '',\n      buttonDisabled: false //typing wrong password or username = reset form\n\n    });\n  }\n\n  async doLogin() {\n    //checks with API\n    //check if username exists in API\n    if (!this.state.username) {\n      return;\n    } //check if password exists in API\n\n\n    if (!this.state.password) {\n      return;\n    } //user can't double click submit button\n\n\n    this.setState({\n      buttonDisabled: true\n    });\n\n    try {\n      //access an API point\n      let res = await fetch('/login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        //send user and pass to API to check for existence\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      }); //result variable that holds result from json\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        //logs user in\n        UserStore.isLoggenIn = true;\n        UserStore.username = result.username;\n      } else if (result && result.success === false) {\n        this.resetForm();\n        alert(result.msg); //return API error\n      }\n    } catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), \"Username:\", /*#__PURE__*/_jsxDEV(InputField, {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: this.state.username ? this.state.username : '' //if username is set condition\n        ,\n        onChange: val => this.setInputValue('username', val)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        tpye: \"password\",\n        placeholder: \"Password\",\n        value: this.state.password ? this.state.password : '' //if username is set condition\n        ,\n        onChange: val => this.setInputValue('password', val)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n        text: \"Login\",\n        disabled: this.state.buttonDisabled,\n        onClick: () => this.doLogin()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/Andrea/abenav/cpsc471FinalProject/cpsc471pages/src/components/stores/LoginForm.js"],"names":["React","InputField","SubmitButton","UserStore","LoginForm","Component","constructor","props","state","username","password","buttonDisabled","setInputValue","property","val","trim","length","setState","resetForm","doLogin","res","fetch","method","headers","body","JSON","stringify","result","json","success","isLoggenIn","alert","msg","e","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './UserStore'; //to find out about successful logins\r\nimport \"./LoginCSS.css\"\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false //API checks if user actually exists @ login time\r\n        }\r\n    }\r\n\r\n    setInputValue(property, val) {\r\n        val = val.trim(); //trimmed string value\r\n        if (val.length > 20) { //max value of input is 20 \r\n            return;\r\n        }\r\n        this.setState({\r\n            [property]: val\r\n        })\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState({\r\n            username: '',\r\n            password: '',\r\n            buttonDisabled: false //typing wrong password or username = reset form\r\n        })\r\n    }\r\n\r\n    async doLogin() { //checks with API\r\n        //check if username exists in API\r\n        if (!this.state.username) {\r\n            return;\r\n        }\r\n\r\n        //check if password exists in API\r\n        if (!this.state.password) {\r\n            return;\r\n        }\r\n\r\n        //user can't double click submit button\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n\r\n        try {\r\n            //access an API point\r\n            let res = await fetch('/login', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                //send user and pass to API to check for existence\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                })\r\n            });\r\n\r\n            //result variable that holds result from json\r\n            let result = await res.json();\r\n            if (result && result.success) {\r\n                //logs user in\r\n                UserStore.isLoggenIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n            \r\n            else if (result && result.success === false) {\r\n                this.resetForm();\r\n                alert(result.msg); //return API error\r\n            }\r\n        }\r\n\r\n        catch(e) {\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    render() {\r\n    return (\r\n      <div className=\"loginForm\">\r\n        <h2>Log in</h2>\r\n        Username: \r\n        <InputField\r\n            type = 'text'\r\n            placeholder = 'Username'\r\n            value = {this.state.username ? this.state.username : ''} //if username is set condition\r\n            onChange = {(val) => this.setInputValue('username', val)}\r\n            />\r\n        <InputField\r\n            tpye = 'password'\r\n            placeholder = 'Password'\r\n            value = {this.state.password ? this.state.password : ''} //if username is set condition\r\n            onChange = {(val) => this.setInputValue('password', val)}\r\n            />\r\n        <SubmitButton\r\n            text = 'Login'\r\n            disabled = {this.state.buttonDisabled}\r\n            onClick = { () => this.doLogin()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}