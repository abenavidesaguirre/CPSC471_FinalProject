{"ast":null,"code":"import React, { useState, useMemo, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar buildDateFromInput = function buildDateFromInput(day, month, year) {\n  var date = new Date(Number(year), Number(month) - 1, Number(day));\n  return date;\n};\n\nvar isValidDateObject = function isValidDateObject(date, day, month, year) {\n  var isDate = Object.prototype.toString.call(date) === '[object Date]';\n  var dayMatch = date.getDate() === Number(day);\n  var monthMatch = date.getMonth() === Number(month) - 1;\n  var yearMatch = date.getFullYear() === Number(year);\n  return isDate && dayMatch && monthMatch && yearMatch;\n};\n\nvar isValidDate = function isValidDate(day, month, year, props) {\n  var userDate = buildDateFromInput(day, month, year);\n\n  if (!isValidDateObject(userDate, day, month, year)) {\n    return props.invalidMessage || 'Not a valid date';\n  }\n\n  if (props.maxDate) {\n    var maxDate = props.maxDate;\n\n    if (userDate > maxDate) {\n      var maxDatePlusOne = new Date(maxDate);\n      maxDatePlusOne.setDate(maxDatePlusOne.getDate() + 1);\n      return props.maxDateMessage || \"Date must be less than \" + maxDatePlusOne.toDateString().substring(3);\n    }\n  }\n\n  if (props.minDate) {\n    var minDate = props.minDate;\n\n    if (userDate < minDate) {\n      var minDateMinusOne = new Date(minDate);\n      minDateMinusOne.setDate(minDateMinusOne.getDate() - 1);\n      return props.minDateMessage || \"Date must be greater than \" + minDateMinusOne.toDateString().substring(3);\n    }\n  }\n\n  return '';\n};\n\nvar MONTHMAP = {\n  1: 'January',\n  2: 'February',\n  3: 'March',\n  4: 'April',\n  5: 'May',\n  6: 'June',\n  7: 'July',\n  8: 'August',\n  9: 'September',\n  10: 'October',\n  11: 'November',\n  12: 'December'\n};\n\nvar getDays = function getDays(showPlaceholder, dayLabel) {\n  var days = [];\n  days.push(React.createElement(\"option\", {\n    value: \"\",\n    disabled: true\n  }, showPlaceholder ? dayLabel || 'Day' : ''));\n\n  for (var i = 1; i <= 31; i += 1) {\n    days.push(React.createElement(\"option\", {\n      value: \"\" + i\n    }, i));\n  }\n\n  return days;\n};\n\nvar getMonths = function getMonths(showPlaceholder, monthLabel, monthNames) {\n  var months = [];\n  months.push(React.createElement(\"option\", {\n    value: \"\",\n    disabled: true\n  }, showPlaceholder ? monthLabel || 'Month' : ''));\n\n  for (var i = 1; i <= 12; i += 1) {\n    months.push(React.createElement(\"option\", {\n      value: \"\" + i\n    }, monthNames ? monthNames[i - 1] : MONTHMAP[i]));\n  }\n\n  return months;\n};\n\nvar getYears = function getYears(max, min, showPlaceholder, value, yearLabel) {\n  var years = [];\n  var maxYear;\n  var minYear;\n\n  if (max !== undefined) {\n    maxYear = max.getFullYear();\n  } else {\n    maxYear = new Date().getFullYear();\n  }\n\n  if (min !== undefined) {\n    minYear = min.getFullYear();\n  } else {\n    minYear = 1900;\n  }\n\n  if (value) {\n    if (Number(value) > maxYear) {\n      maxYear = Number(value);\n    }\n\n    if (Number(value) < minYear) {\n      minYear = Number(value);\n    }\n  }\n\n  years.push(React.createElement(\"option\", {\n    value: \"\",\n    disabled: true\n  }, showPlaceholder ? yearLabel || 'Year' : ''));\n\n  for (var i = maxYear; i >= minYear; i -= 1) {\n    years.push(React.createElement(\"option\", {\n      value: \"\" + i\n    }, i));\n  }\n\n  return years;\n};\n\nvar spreadDateToObject = function spreadDateToObject(dateValue) {\n  return {\n    day: dateValue ? \"\" + dateValue.getDate() : '',\n    month: dateValue ? \"\" + (dateValue.getMonth() + 1) : '',\n    year: dateValue ? \"\" + dateValue.getFullYear() : ''\n  };\n};\n\nvar flex = {\n  display: 'flex'\n};\nvar flexColumn = {\n  display: 'flex',\n  flexDirection: 'column'\n};\n\nvar SelectDatepicker = function SelectDatepicker(props) {\n  var _useState = useState(true),\n      isDirty = _useState[0],\n      setIsDirty = _useState[1];\n\n  var _useState2 = useState(false),\n      hasError = _useState2[0],\n      setHasError = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useState4 = useState(spreadDateToObject(props.value)),\n      date = _useState4[0],\n      setDate = _useState4[1];\n\n  var orderArray = useMemo(function () {\n    return props.format.split('/');\n  }, [props.format]);\n  var onDateChange = useCallback(function (newDate) {\n    props.onDateChange(newDate);\n  }, [props]);\n  var validDateChange = useCallback(function () {\n    var newDate = buildDateFromInput(date.day, date.month, date.year);\n    onDateChange(newDate);\n  }, [date.day, date.month, date.year, onDateChange]);\n  var renderError = useCallback(function (err, hasErr) {\n    setError(err);\n    setHasError(hasErr);\n    onDateChange(null);\n  }, [onDateChange]);\n  var validate = useCallback(function () {\n    var day = date.day,\n        month = date.month,\n        year = date.year;\n\n    if (!day || !month || !year) {\n      onDateChange(null);\n      return;\n    }\n\n    var errorString = isValidDate(day, month, year, props);\n\n    if (errorString !== '') {\n      renderError(errorString, true);\n      return;\n    }\n\n    validDateChange();\n  }, [date, onDateChange, props, renderError, validDateChange]);\n  var onInputChange = useCallback(function (e) {\n    var _extends2;\n\n    setDate(_extends({}, date, (_extends2 = {}, _extends2[e.target.name] = e.target.value, _extends2)));\n    setIsDirty(true);\n  }, [date]);\n  var inputField = useCallback(function (id, label, value, options) {\n    var className = \"rsd_\" + id + \"-container\";\n    return React.createElement(\"div\", {\n      className: \"\" + className,\n      style: flexColumn\n    }, props.showLabels ? React.createElement(\"label\", {\n      htmlFor: id\n    }, label) : null, React.createElement(\"select\", {\n      className: \"\" + (hasError ? 'has-error' : ''),\n      id: id,\n      name: id,\n      value: value,\n      onChange: onInputChange\n    }, options.map(function (option, i) {\n      return React.createElement(React.Fragment, {\n        key: option + \"-\" + i\n      }, option);\n    })));\n  }, [hasError, onInputChange, props.showLabels]);\n  var dateField = useMemo(function () {\n    var showPlaceholders = props.showPlaceholders,\n        monthNames = props.monthNames,\n        maxDate = props.maxDate,\n        minDate = props.minDate,\n        labels = props.labels;\n    var dayLabel = labels && labels.day || 'Day';\n    var monthLabel = labels && labels.month || 'Month';\n    var yearLabel = labels && labels.year || 'Year';\n    var fields = {\n      day: inputField('day', dayLabel, date.day, getDays(showPlaceholders, dayLabel)),\n      month: inputField('month', monthLabel, date.month, getMonths(showPlaceholders, monthLabel, monthNames)),\n      year: inputField('year', yearLabel, date.year, getYears(maxDate, minDate, showPlaceholders, date.year, yearLabel))\n    };\n    return fields;\n  }, [date.day, date.month, date.year, inputField, props]);\n  useEffect(function () {\n    if (isDirty) {\n      setError('');\n      setHasError(false);\n      validate();\n      setIsDirty(false);\n    }\n  }, [isDirty]);\n  useEffect(function () {\n    var value = props.value;\n    var day = date.day,\n        month = date.month,\n        year = date.year;\n\n    if (value !== null && value !== buildDateFromInput(day, month, year)) {\n      setDate(spreadDateToObject(value));\n    }\n  }, [props]);\n  return React.createElement(\"div\", {\n    className: \"rsd \" + props.className\n  }, React.createElement(\"div\", {\n    className: \"rsd_date-container\",\n    style: flex\n  }, orderArray.map(function (key, i) {\n    return React.createElement(React.Fragment, {\n      key: key + \"-\" + i\n    }, dateField[key]);\n  })), props.showErrors && hasError && React.createElement(\"div\", {\n    className: \"error-message\"\n  }, error));\n};\n\nSelectDatepicker.defaultProps = {\n  value: null,\n  showLabels: true,\n  showPlaceholders: true,\n  showErrors: true,\n  format: 'month/day/year',\n  className: ''\n};\nexport default SelectDatepicker;","map":{"version":3,"sources":["../src/dateValidation.ts","../src/dateMap.tsx","../src/helpers.ts","../src/styles.ts","../src/index.tsx"],"names":["buildDateFromInput","date","Number","isValidDateObject","isDate","Object","dayMatch","monthMatch","yearMatch","isValidDate","userDate","props","maxDate","maxDatePlusOne","minDate","minDateMinusOne","MONTHMAP","getDays","days","value","disabled","showPlaceholder","dayLabel","i","getMonths","months","monthLabel","monthNames","getYears","years","max","maxYear","min","minYear","yearLabel","spreadDateToObject","day","dateValue","month","year","flex","display","flexColumn","flexDirection","SelectDatepicker","isDirty","setIsDirty","useState","hasError","setHasError","error","setError","setDate","orderArray","useMemo","onDateChange","useCallback","validDateChange","newDate","renderError","validate","errorString","onInputChange","e","inputField","className","style","htmlFor","id","name","onChange","React","key","option","dateField","showPlaceholders","labels","fields","useEffect","showLabels","showErrors","format"],"mappings":"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","sourcesContent":["/**\n * Build a date from input\n * @param {string} day\n * @param {string} month\n * @param {string} year\n */\nconst buildDateFromInput = (day: string, month: string, year: string) => {\n  const date = new Date(Number(year), Number(month) - 1, Number(day));\n  return date;\n};\n\n/**\n * Check if the date value is a valid Date object and that it matches the values it was created from\n * @param date Date\n * @param day string\n * @param month string\n * @param year string\n */\nconst isValidDateObject = (\n  date: Date,\n  day: string,\n  month: string,\n  year: string,\n) => {\n  const isDate = Object.prototype.toString.call(date) === '[object Date]';\n  const dayMatch = date.getDate() === Number(day);\n  const monthMatch = date.getMonth() === Number(month) - 1;\n  const yearMatch = date.getFullYear() === Number(year);\n\n  return isDate && dayMatch && monthMatch && yearMatch;\n};\n\n/**\n * Determine if provided date is a valid date and falls between date range\n * @param {string} day\n * @param {string} month\n * @param {string} year\n * @param {object} props\n */\nconst isValidDate = (day: string, month: string, year: string, props: any) => {\n  const userDate = buildDateFromInput(day, month, year);\n\n  // Must be a valid date\n  if (!isValidDateObject(userDate, day, month, year)) {\n    return props.invalidMessage || 'Not a valid date';\n  }\n\n  // Must be same or before max date\n  if (props.maxDate) {\n    const { maxDate } = props;\n    if (userDate > maxDate) {\n      const maxDatePlusOne = new Date(maxDate);\n      maxDatePlusOne.setDate(maxDatePlusOne.getDate() + 1);\n\n      return (\n        props.maxDateMessage ||\n        `Date must be less than ${maxDatePlusOne.toDateString().substring(3)}`\n      );\n    }\n  }\n\n  // Must be same or after min date\n  if (props.minDate) {\n    const { minDate } = props;\n    if (userDate < minDate) {\n      const minDateMinusOne = new Date(minDate);\n      minDateMinusOne.setDate(minDateMinusOne.getDate() - 1);\n\n      return (\n        props.minDateMessage ||\n        `Date must be greater than ${minDateMinusOne\n          .toDateString()\n          .substring(3)}`\n      );\n    }\n  }\n\n  return '';\n};\n\nexport { isValidDate, buildDateFromInput };\n","import React from 'react';\n\nconst MONTHMAP = {\n  1: 'January',\n  2: 'February',\n  3: 'March',\n  4: 'April',\n  5: 'May',\n  6: 'June',\n  7: 'July',\n  8: 'August',\n  9: 'September',\n  10: 'October',\n  11: 'November',\n  12: 'December',\n};\n\nconst getDays = (showPlaceholder: boolean, dayLabel: string) => {\n  const days = [];\n\n  days.push(\n    <option value=\"\" disabled>\n      {showPlaceholder ? dayLabel || 'Day' : ''}\n    </option>,\n  );\n\n  for (let i = 1; i <= 31; i += 1) {\n    days.push(<option value={`${i}`}>{i}</option>);\n  }\n\n  return days;\n};\n\nconst getMonths = (\n  showPlaceholder: boolean,\n  monthLabel: string,\n  monthNames: Array<string> | undefined,\n) => {\n  const months = [];\n\n  months.push(\n    <option value=\"\" disabled>\n      {showPlaceholder ? monthLabel || 'Month' : ''}\n    </option>,\n  );\n\n  for (let i = 1; i <= 12; i += 1) {\n    months.push(\n      <option value={`${i}`}>\n        {monthNames ? monthNames[i - 1] : MONTHMAP[i]}\n      </option>,\n    );\n  }\n\n  return months;\n};\n\nconst getYears = (\n  max: Date | undefined,\n  min: Date | undefined,\n  showPlaceholder: boolean,\n  value: string,\n  yearLabel: string,\n) => {\n  const years = [];\n  let maxYear;\n  let minYear;\n\n  if (max !== undefined) {\n    maxYear = max.getFullYear();\n  } else {\n    maxYear = new Date().getFullYear();\n  }\n\n  if (min !== undefined) {\n    minYear = min.getFullYear();\n  } else {\n    minYear = 1900;\n  }\n\n  if (value) {\n    if (Number(value) > maxYear) {\n      maxYear = Number(value);\n    }\n\n    if (Number(value) < minYear) {\n      minYear = Number(value);\n    }\n  }\n\n  years.push(\n    <option value=\"\" disabled>\n      {showPlaceholder ? yearLabel || 'Year' : ''}\n    </option>,\n  );\n\n  for (let i = maxYear; i >= minYear; i -= 1) {\n    years.push(<option value={`${i}`}>{i}</option>);\n  }\n\n  return years;\n};\n\nexport { getDays, getMonths, getYears };\n","import { IDate } from './interfaces';\n\n/**\n * Parse date object into day, month, year state\n */\nexport const spreadDateToObject = (dateValue: Date | null): IDate => {\n  return {\n    day: dateValue ? `${dateValue.getDate()}` : '',\n    month: dateValue ? `${dateValue.getMonth() + 1}` : '',\n    year: dateValue ? `${dateValue.getFullYear()}` : '',\n  };\n};\n","export const flex: React.CSSProperties = {\n  display: 'flex',\n};\n\nexport const flexColumn: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n};\n","/* eslint-disable react/no-array-index-key */\nimport React, {\n  useState,\n  useCallback,\n  ChangeEvent,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { isValidDate, buildDateFromInput } from './dateValidation';\nimport { getDays, getMonths, getYears } from './dateMap';\nimport { IDate, ISelectDatePicker } from './interfaces';\nimport { spreadDateToObject } from './helpers';\nimport { flex, flexColumn } from './styles';\n\nconst SelectDatepicker: React.FC<ISelectDatePicker> = (props) => {\n  const [isDirty, setIsDirty] = useState<boolean>(true);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [error, setError] = useState<string>();\n  const [date, setDate] = useState<IDate>(spreadDateToObject(props.value));\n\n  const orderArray = useMemo(() => props.format!.split('/'), [props.format]);\n\n  /**\n   * Call onDateChange prop with the provided date object\n   */\n  const onDateChange = useCallback(\n    (newDate) => {\n      props.onDateChange(newDate);\n    },\n    [props],\n  );\n\n  /**\n   * Build a Date object and call the onDateChange function\n   */\n  const validDateChange = useCallback(() => {\n    const newDate = buildDateFromInput(date.day, date.month, date.year);\n    onDateChange(newDate);\n  }, [date.day, date.month, date.year, onDateChange]);\n\n  /**\n   * Sets the error state and calls the onDateChange function with a null value\n   */\n  const renderError = useCallback(\n    (err, hasErr) => {\n      setError(err);\n      setHasError(hasErr);\n      onDateChange(null);\n    },\n    [onDateChange],\n  );\n\n  /**\n   * Validates if a the inputs form a valid date\n   * Returns null if values are not set\n   * Returns null and errors if date is not valid\n   * Returns a valid date object when everything passes\n   */\n  const validate = useCallback(() => {\n    const { day, month, year } = date;\n\n    // Must contain values\n    if (!day || !month || !year) {\n      onDateChange(null);\n      return;\n    }\n\n    // Validate date input\n    const errorString = isValidDate(day, month, year, props);\n    if (errorString !== '') {\n      renderError(errorString, true);\n      return;\n    }\n\n    validDateChange();\n  }, [date, onDateChange, props, renderError, validDateChange]);\n\n  /**\n   * Sets the date state when an input value changes\n   */\n  const onInputChange = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setDate({ ...date, [e.target.name]: e.target.value });\n      setIsDirty(true);\n    },\n    [date],\n  );\n\n  /**\n   * Create an input field with a form label\n   */\n  const inputField = useCallback(\n    (id, label, value, options) => {\n      const className = `rsd_${id}-container`;\n\n      return (\n        <div className={`${className}`} style={flexColumn}>\n          {props.showLabels ? <label htmlFor={id}>{label}</label> : null}\n          <select\n            className={`${hasError ? 'has-error' : ''}`}\n            id={id}\n            name={id}\n            value={value}\n            onChange={onInputChange}>\n            {options.map((option: string, i: number) => {\n              return (\n                <React.Fragment key={`${option}-${i}`}>{option}</React.Fragment>\n              );\n            })}\n          </select>\n        </div>\n      );\n    },\n    [hasError, onInputChange, props.showLabels],\n  );\n\n  /**\n   * Creates an object with all input field elements\n   */\n  const dateField = useMemo(() => {\n    const { showPlaceholders, monthNames, maxDate, minDate, labels } = props;\n\n    const dayLabel = (labels && labels.day) || 'Day';\n    const monthLabel = (labels && labels.month) || 'Month';\n    const yearLabel = (labels && labels.year) || 'Year';\n\n    const fields = {\n      day: inputField(\n        'day',\n        dayLabel,\n        date.day,\n        getDays(showPlaceholders!, dayLabel),\n      ),\n      month: inputField(\n        'month',\n        monthLabel,\n        date.month,\n        getMonths(showPlaceholders!, monthLabel, monthNames),\n      ),\n      year: inputField(\n        'year',\n        yearLabel,\n        date.year,\n        getYears(maxDate, minDate, showPlaceholders!, date.year, yearLabel),\n      ),\n    };\n\n    return fields;\n  }, [date.day, date.month, date.year, inputField, props]);\n\n  /**\n   * When ever the date state changes then clear errors and validate the date\n   */\n  useEffect(() => {\n    if (isDirty) {\n      setError('');\n      setHasError(false);\n      validate();\n      setIsDirty(false);\n    }\n  }, [isDirty]);\n\n  useEffect(() => {\n    const { value } = props;\n    const { day, month, year } = date;\n\n    if (value !== null && value !== buildDateFromInput(day, month, year)) {\n      setDate(spreadDateToObject(value));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  return (\n    <div className={`rsd ${props.className}`}>\n      <div className=\"rsd_date-container\" style={flex}>\n        {orderArray.map((key, i) => {\n          return (\n            <React.Fragment key={`${key}-${i}`}>\n              {dateField[key]}\n            </React.Fragment>\n          );\n        })}\n      </div>\n      {props.showErrors && hasError && (\n        <div className=\"error-message\">{error}</div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectDatepicker;\n\nSelectDatepicker.defaultProps = {\n  value: null,\n  showLabels: true,\n  showPlaceholders: true,\n  showErrors: true,\n  format: 'month/day/year',\n  className: '',\n};\n"]},"metadata":{},"sourceType":"module"}