{"ast":null,"code":"var _jsxFileName = \"/Users/Andrea/abenav/classes/cpsc471/CPSC471_FinalProject/client/src/pages/Calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createRef, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins \n\nimport dayGridPlugin from '@fullcalendar/daygrid'; // a plugin!\n\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport \"./Calendar.css\";\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarPage = _ref => {\n  _s();\n\n  let {\n    times\n  } = _ref;\n  // const [eventTimes] = useState([\n  //   { title: '2 Hour Guided Hike', start: '2022-01-16T8:00:00', end: '2022-01-16T10:00:00' },\n  //   { title: 'Ice Skating', start: '2022-01-03T13:00:00', end: '2022-01-03T16:00:00' },\n  //   { title: 'Adult Ski Lessons', start: '2022-01-07T8:00:00', end: '2022-01-07T16:00:00' },\n  //   { title: 'Kids Ski Lessons', start: '2022-01-12T10:00:00', end: '2022-01-12T14:00:00' }\n  // ])\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [eventTimes, setEventTimes] = useState([]);\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/calendarTimes\").then(response => {\n      setTimeSlots(response.data);\n    });\n    console.log(\"Prinintg timeslots\");\n    console.log(timeSlots);\n    timeSlots.map(val => {\n      setEventTimes([...eventTimes, {\n        title: val.ExcursionName,\n        start: val.Date.substr(0, 10) + 'T' + val.Start + \":00:00\",\n        end: val.Date.substr(0, 10) + 'T' + val.End + \":00:00\"\n      }]);\n    });\n    console.log(\"Printing after mapping\");\n    console.log(eventTimes);\n  }, []);\n\n  const testTimes = () => {\n    // console.log(\"test timeSlots\")\n    // console.log(timeSlots)\n    // timeSlots.map((val) => {\n    //   setEventTimes([...eventTimes, {\n    //     title: val.ExcursionName, start: val.Date.substr(0,10)+'T'+val.Start+\":00:00\", end: val.Date.substr(0,10)+'T'+val.End+\":00:00\"\n    //   }\n    //   ])\n    // })\n    console.log(timeSlots);\n    console.log(\"Printing\");\n    console.log(eventTimes);\n  };\n\n  const calendarRef = /*#__PURE__*/createRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Activity Calendar \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onMouseMove: () => testTimes(),\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        ref: calendarRef,\n        height: 750,\n        contentHeight: 750,\n        plugins: [dayGridPlugin, timeGridPlugin],\n        initialView: \"dayGridMonth\",\n        events: times,\n        customButtons: {\n          myTimeDayBtn: {\n            text: \"timeDay\",\n\n            click() {\n              const calendar = calendarRef.current;\n\n              if (calendar) {\n                const calendarApi = calendar.getApi();\n                calendarApi.changeView(\"timeGridDay\");\n              }\n            }\n\n          },\n          myTimeWeekBtn: {\n            text: \"timeWeek\",\n\n            click() {\n              const calendar = calendarRef.current;\n\n              if (calendar) {\n                const calendarApi = calendar.getApi();\n                calendarApi.changeView(\"timeGridWeek\");\n              }\n            }\n\n          }\n        },\n        headerToolbar: {\n          left: \"prev next\",\n          center: \"title\",\n          right: \"today dayGridDay dayGridWeek dayGridMonth\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CalendarPage, \"TzjZSwu8y0QcQ39yM1bPQIyjbcw=\");\n\n_c = CalendarPage;\nexport default CalendarPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarPage\");","map":{"version":3,"sources":["/Users/Andrea/abenav/classes/cpsc471/CPSC471_FinalProject/client/src/pages/Calendar/Calendar.js"],"names":["React","useState","createRef","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","Axios","CalendarPage","times","timeSlots","setTimeSlots","eventTimes","setEventTimes","get","then","response","data","console","log","map","val","title","ExcursionName","start","Date","substr","Start","end","End","testTimes","calendarRef","myTimeDayBtn","text","click","calendar","current","calendarApi","getApi","changeView","myTimeWeekBtn","left","center","right"],"mappings":"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","sourcesContent":["import React, {useState, createRef, useEffect} from 'react';\nimport FullCalendar from '@fullcalendar/react' // must go before plugins \nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport \"./Calendar.css\"\nimport  Axios  from 'axios';\n\nconst CalendarPage = ({ times }) => {\n\n  // const [eventTimes] = useState([\n  //   { title: '2 Hour Guided Hike', start: '2022-01-16T8:00:00', end: '2022-01-16T10:00:00' },\n  //   { title: 'Ice Skating', start: '2022-01-03T13:00:00', end: '2022-01-03T16:00:00' },\n  //   { title: 'Adult Ski Lessons', start: '2022-01-07T8:00:00', end: '2022-01-07T16:00:00' },\n  //   { title: 'Kids Ski Lessons', start: '2022-01-12T10:00:00', end: '2022-01-12T14:00:00' }\n  // ])\n\n      const [timeSlots, setTimeSlots] = useState([]);\n      const [eventTimes, setEventTimes] = useState([]);\n\n      useEffect(() => {\n        Axios.get(\"http://localhost:3001/calendarTimes\").then((response) => {\n          setTimeSlots(response.data);\n        });\n        console.log(\"Prinintg timeslots\")\n        console.log(timeSlots)\n\n        timeSlots.map((val) => {\n          setEventTimes([...eventTimes, {\n            title: val.ExcursionName, start: val.Date.substr(0,10)+'T'+val.Start+\":00:00\", end: val.Date.substr(0,10)+'T'+val.End+\":00:00\"\n          }\n          ]) \n        })\n\n        console.log(\"Printing after mapping\")\n        console.log(eventTimes)\n\n      }, [])\n\n      const testTimes = () => {\n        // console.log(\"test timeSlots\")\n        // console.log(timeSlots)\n        // timeSlots.map((val) => {\n        //   setEventTimes([...eventTimes, {\n        //     title: val.ExcursionName, start: val.Date.substr(0,10)+'T'+val.Start+\":00:00\", end: val.Date.substr(0,10)+'T'+val.End+\":00:00\"\n        //   }\n        //   ])\n        // })\n        console.log(timeSlots)\n        console.log(\"Printing\")\n        console.log(eventTimes)\n      }\n\n\n        const calendarRef = createRef();\n      return (\n        \n        <div className=\"calendar\">\n          <h2> Activity Calendar </h2>\n          <button onMouseMove={()=>testTimes()}>test</button> \n         <div className=\"content\">\n         <FullCalendar\n            ref={calendarRef}\n            height={750}\n            contentHeight={750}\n            plugins={[ dayGridPlugin, timeGridPlugin ]}\n            initialView=\"dayGridMonth\"\n            events={times}\n            customButtons = {{\n              myTimeDayBtn: {\n                text: \"timeDay\",\n                click() {\n                  const calendar = calendarRef.current;\n                  if(calendar) {\n                    const calendarApi = calendar.getApi();\n    \n                    calendarApi.changeView(\"timeGridDay\");\n                  }\n                },\n              },\n              myTimeWeekBtn: {\n                text: \"timeWeek\",\n                click() { \n                  const calendar = calendarRef.current;\n                  if(calendar) {\n                    const calendarApi = calendar.getApi();\n    \n                    calendarApi.changeView(\"timeGridWeek\");\n                  }\n                },\n              },\n            }}\n            headerToolbar={{\n              left: \"prev next\",\n              center: \"title\",\n              right: \"today dayGridDay dayGridWeek dayGridMonth\",\n            }}\n          />\n          \n         </div>\n        </div>\n      );\n    }\n   \n  export default CalendarPage"]},"metadata":{},"sourceType":"module"}