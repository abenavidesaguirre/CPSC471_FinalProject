function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var buildDateFromInput = function buildDateFromInput(day, month, year) {
  var date = new Date(Number(year), Number(month) - 1, Number(day));
  return date;
};

var isValidDateObject = function isValidDateObject(date, day, month, year) {
  var isDate = Object.prototype.toString.call(date) === '[object Date]';
  var dayMatch = date.getDate() === Number(day);
  var monthMatch = date.getMonth() === Number(month) - 1;
  var yearMatch = date.getFullYear() === Number(year);
  return isDate && dayMatch && monthMatch && yearMatch;
};

var isValidDate = function isValidDate(day, month, year, props) {
  var userDate = buildDateFromInput(day, month, year);

  if (!isValidDateObject(userDate, day, month, year)) {
    return props.invalidMessage || 'Not a valid date';
  }

  if (props.maxDate) {
    var maxDate = props.maxDate;

    if (userDate > maxDate) {
      var maxDatePlusOne = new Date(maxDate);
      maxDatePlusOne.setDate(maxDatePlusOne.getDate() + 1);
      return props.maxDateMessage || "Date must be less than " + maxDatePlusOne.toDateString().substring(3);
    }
  }

  if (props.minDate) {
    var minDate = props.minDate;

    if (userDate < minDate) {
      var minDateMinusOne = new Date(minDate);
      minDateMinusOne.setDate(minDateMinusOne.getDate() - 1);
      return props.minDateMessage || "Date must be greater than " + minDateMinusOne.toDateString().substring(3);
    }
  }

  return '';
};

var MONTHMAP = {
  1: 'January',
  2: 'February',
  3: 'March',
  4: 'April',
  5: 'May',
  6: 'June',
  7: 'July',
  8: 'August',
  9: 'September',
  10: 'October',
  11: 'November',
  12: 'December'
};

var getDays = function getDays(showPlaceholder, dayLabel) {
  var days = [];
  days.push(React__default.createElement("option", {
    value: "",
    disabled: true
  }, showPlaceholder ? dayLabel || 'Day' : ''));

  for (var i = 1; i <= 31; i += 1) {
    days.push(React__default.createElement("option", {
      value: "" + i
    }, i));
  }

  return days;
};

var getMonths = function getMonths(showPlaceholder, monthLabel, monthNames) {
  var months = [];
  months.push(React__default.createElement("option", {
    value: "",
    disabled: true
  }, showPlaceholder ? monthLabel || 'Month' : ''));

  for (var i = 1; i <= 12; i += 1) {
    months.push(React__default.createElement("option", {
      value: "" + i
    }, monthNames ? monthNames[i - 1] : MONTHMAP[i]));
  }

  return months;
};

var getYears = function getYears(max, min, showPlaceholder, value, yearLabel) {
  var years = [];
  var maxYear;
  var minYear;

  if (max !== undefined) {
    maxYear = max.getFullYear();
  } else {
    maxYear = new Date().getFullYear();
  }

  if (min !== undefined) {
    minYear = min.getFullYear();
  } else {
    minYear = 1900;
  }

  if (value) {
    if (Number(value) > maxYear) {
      maxYear = Number(value);
    }

    if (Number(value) < minYear) {
      minYear = Number(value);
    }
  }

  years.push(React__default.createElement("option", {
    value: "",
    disabled: true
  }, showPlaceholder ? yearLabel || 'Year' : ''));

  for (var i = maxYear; i >= minYear; i -= 1) {
    years.push(React__default.createElement("option", {
      value: "" + i
    }, i));
  }

  return years;
};

var spreadDateToObject = function spreadDateToObject(dateValue) {
  return {
    day: dateValue ? "" + dateValue.getDate() : '',
    month: dateValue ? "" + (dateValue.getMonth() + 1) : '',
    year: dateValue ? "" + dateValue.getFullYear() : ''
  };
};

var flex = {
  display: 'flex'
};
var flexColumn = {
  display: 'flex',
  flexDirection: 'column'
};

var SelectDatepicker = function SelectDatepicker(props) {
  var _useState = React.useState(true),
      isDirty = _useState[0],
      setIsDirty = _useState[1];

  var _useState2 = React.useState(false),
      hasError = _useState2[0],
      setHasError = _useState2[1];

  var _useState3 = React.useState(),
      error = _useState3[0],
      setError = _useState3[1];

  var _useState4 = React.useState(spreadDateToObject(props.value)),
      date = _useState4[0],
      setDate = _useState4[1];

  var orderArray = React.useMemo(function () {
    return props.format.split('/');
  }, [props.format]);
  var onDateChange = React.useCallback(function (newDate) {
    props.onDateChange(newDate);
  }, [props]);
  var validDateChange = React.useCallback(function () {
    var newDate = buildDateFromInput(date.day, date.month, date.year);
    onDateChange(newDate);
  }, [date.day, date.month, date.year, onDateChange]);
  var renderError = React.useCallback(function (err, hasErr) {
    setError(err);
    setHasError(hasErr);
    onDateChange(null);
  }, [onDateChange]);
  var validate = React.useCallback(function () {
    var day = date.day,
        month = date.month,
        year = date.year;

    if (!day || !month || !year) {
      onDateChange(null);
      return;
    }

    var errorString = isValidDate(day, month, year, props);

    if (errorString !== '') {
      renderError(errorString, true);
      return;
    }

    validDateChange();
  }, [date, onDateChange, props, renderError, validDateChange]);
  var onInputChange = React.useCallback(function (e) {
    var _extends2;

    setDate(_extends({}, date, (_extends2 = {}, _extends2[e.target.name] = e.target.value, _extends2)));
    setIsDirty(true);
  }, [date]);
  var inputField = React.useCallback(function (id, label, value, options) {
    var className = "rsd_" + id + "-container";
    return React__default.createElement("div", {
      className: "" + className,
      style: flexColumn
    }, props.showLabels ? React__default.createElement("label", {
      htmlFor: id
    }, label) : null, React__default.createElement("select", {
      className: "" + (hasError ? 'has-error' : ''),
      id: id,
      name: id,
      value: value,
      onChange: onInputChange
    }, options.map(function (option, i) {
      return React__default.createElement(React__default.Fragment, {
        key: option + "-" + i
      }, option);
    })));
  }, [hasError, onInputChange, props.showLabels]);
  var dateField = React.useMemo(function () {
    var showPlaceholders = props.showPlaceholders,
        monthNames = props.monthNames,
        maxDate = props.maxDate,
        minDate = props.minDate,
        labels = props.labels;
    var dayLabel = labels && labels.day || 'Day';
    var monthLabel = labels && labels.month || 'Month';
    var yearLabel = labels && labels.year || 'Year';
    var fields = {
      day: inputField('day', dayLabel, date.day, getDays(showPlaceholders, dayLabel)),
      month: inputField('month', monthLabel, date.month, getMonths(showPlaceholders, monthLabel, monthNames)),
      year: inputField('year', yearLabel, date.year, getYears(maxDate, minDate, showPlaceholders, date.year, yearLabel))
    };
    return fields;
  }, [date.day, date.month, date.year, inputField, props]);
  React.useEffect(function () {
    if (isDirty) {
      setError('');
      setHasError(false);
      validate();
      setIsDirty(false);
    }
  }, [isDirty]);
  React.useEffect(function () {
    var value = props.value;
    var day = date.day,
        month = date.month,
        year = date.year;

    if (value !== null && value !== buildDateFromInput(day, month, year)) {
      setDate(spreadDateToObject(value));
    }
  }, [props]);
  return React__default.createElement("div", {
    className: "rsd " + props.className
  }, React__default.createElement("div", {
    className: "rsd_date-container",
    style: flex
  }, orderArray.map(function (key, i) {
    return React__default.createElement(React__default.Fragment, {
      key: key + "-" + i
    }, dateField[key]);
  })), props.showErrors && hasError && React__default.createElement("div", {
    className: "error-message"
  }, error));
};
SelectDatepicker.defaultProps = {
  value: null,
  showLabels: true,
  showPlaceholders: true,
  showErrors: true,
  format: 'month/day/year',
  className: ''
};

module.exports = SelectDatepicker;
//# sourceMappingURL=index.js.map
